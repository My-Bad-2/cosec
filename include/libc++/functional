#pragma once

#include <cstddef>
#include <cstdint>
#include <cstring>
#include <type_traits>
#include <utility>

namespace std {
namespace details {
constexpr __int128_t MurmurHash3_128(const void* key, uint64_t len,
                                     uint64_t seed, void* out = nullptr) {
    auto rotl64 = [](uint64_t x, int8_t r) {
        return (x << r) | (x >> (64 - r));
    };

    auto fmix64 = [](uint64_t k) {
        k ^= k >> 33;
        k *= 0xFF51AFD7ED558CCDLLU;
        k ^= k >> 33;
        k *= 0xC4CEB9FE1A85EC53LLU;
        k ^= k >> 33;

        return k;
    };

    auto data = static_cast<const uint8_t*>(key);
    const uint64_t nblocks = len / 16;

    uint64_t h1 = seed;
    uint64_t h2 = seed;

    const uint64_t c1 = 0x87C37B91114253D5LLU;
    const uint64_t c2 = 0x4CF5AD432745937FLLU;

    auto blocks = static_cast<const uint64_t*>(key);

    for (uint64_t i = 0; i < nblocks; i++) {
        uint64_t k1 = blocks[i * 2 + 0];
        uint64_t k2 = blocks[i * 2 + 1];

        k1 *= c1;
        k1 = rotl64(k1, 31);
        k1 *= c2;
        h1 ^= k1;
        h1 = rotl64(h1, 27);
        h1 += h2;
        h1 = h1 * 5 + 0x52DCE729;
        k2 *= c2;
        k2 = rotl64(k2, 33);
        k2 *= c1;
        h2 ^= k2;
        h2 = rotl64(h2, 31);
        h2 += h1;
        h2 = h2 * 5 + 0x38495AB5;
    }

    auto tail = static_cast<const uint8_t*>(
        static_cast<const void*>(data + nblocks * 16));

    uint64_t k1 = 0;
    uint64_t k2 = 0;

    switch (len & 15) {
        case 15:
            k2 ^= (static_cast<uint64_t>(tail[14])) << 48;
        case 14:
            k2 ^= (static_cast<uint64_t>(tail[13])) << 40;
        case 13:
            k2 ^= (static_cast<uint64_t>(tail[12])) << 32;
        case 12:
            k2 ^= (static_cast<uint64_t>(tail[11])) << 24;
        case 11:
            k2 ^= (static_cast<uint64_t>(tail[10])) << 16;
        case 10:
            k2 ^= (static_cast<uint64_t>(tail[9])) << 8;
        case 9:
            k2 ^= (static_cast<uint64_t>(tail[8])) << 0;
            k2 *= c2;
            k2 = rotl64(k2, 33);
            k2 *= c1;
            h2 ^= k2;
        case 8:
            k1 ^= (static_cast<uint64_t>(tail[7])) << 56;
        case 7:
            k1 ^= (static_cast<uint64_t>(tail[6])) << 48;
        case 6:
            k1 ^= (static_cast<uint64_t>(tail[5])) << 40;
        case 5:
            k1 ^= (static_cast<uint64_t>(tail[4])) << 32;
        case 4:
            k1 ^= (static_cast<uint64_t>(tail[3])) << 24;
        case 3:
            k1 ^= (static_cast<uint64_t>(tail[2])) << 16;
        case 2:
            k1 ^= (static_cast<uint64_t>(tail[1])) << 8;
        case 1:
            k1 ^= (static_cast<uint64_t>(tail[0])) << 0;
            k1 *= c1;
            k1 = rotl64(k1, 31);
            k1 *= c2;
            h1 ^= k1;
    };

    h1 ^= len;
    h2 ^= len;

    h1 += h2;
    h2 += h1;

    h1 = fmix64(h1);
    h2 = fmix64(h2);

    h1 += h2;
    h2 += h1;

    if (out != nullptr) {
        static_cast<uint64_t*>(out)[0] = h1;
        static_cast<uint64_t*>(out)[1] = h2;
    }

    return (static_cast<__int128>(h1) << 64) | static_cast<__int128>(h2);
}

constexpr uint64_t MurmurHash3_64(const void* key, uint64_t len,
                                  uint64_t seed) {
    auto val = MurmurHash3_128(key, len, seed);
    return static_cast<uint64_t>(val) ^ static_cast<uint64_t>(val >> 64);
}

constexpr uint64_t MurmurHash2_64A(const void* key, uint64_t len,
                                   uint64_t seed) {
    const uint64_t m = 0xC6A4A7935BD1E995;
    const int r = 47;

    uint64_t h = seed ^ (len * m);

    const uint64_t* data = static_cast<const uint64_t*>(key);
    const uint64_t* end = data + (len / 8);

    while (data != end) {
        uint64_t k = 0;
        memcpy(&k, data++, sizeof(uint64_t));

        k *= m;
        k ^= k >> r;
        k *= m;

        h ^= k;
        h *= m;
    }

    auto data2 = static_cast<const uint8_t*>(static_cast<const void*>(data));

    switch (len & 7) {
        case 7:
            h ^= static_cast<uint64_t>(data2[6]) << 48;
        case 6:
            h ^= static_cast<uint64_t>(data2[5]) << 40;
        case 5:
            h ^= static_cast<uint64_t>(data2[4]) << 32;
        case 4:
            h ^= static_cast<uint64_t>(data2[3]) << 24;
        case 3:
            h ^= static_cast<uint64_t>(data2[2]) << 16;
        case 2:
            h ^= static_cast<uint64_t>(data2[1]) << 8;
        case 1:
            h ^= static_cast<uint64_t>(data2[0]);
            h *= m;
    };

    h ^= h >> r;
    h *= m;
    h ^= h >> r;

    return h;
}

constexpr uint64_t FNV1a(const void* key, uint64_t len,
                         uint64_t seed = 0xCBF29CE484222325) {
    const uint64_t prime = 0x00000100000001B3;
    uint64_t h = seed;

    const uint8_t* data = static_cast<const uint8_t*>(key);

    for (uint64_t i = 0; i < len; i++) {
        h ^= data[i];
        h *= prime;
    }

    return h;
}

constexpr inline size_t hash_bytes(const void* ptr, uint64_t len,
                                   uint64_t seed = 0xC70F6907UL) {
    return MurmurHash2_64A(ptr, len, seed);
}

constexpr inline size_t hash(const auto& val) {
    return _hash(&val, sizeof(val));
}

constexpr inline size_t hash_combine(const auto& val, uint64_t old) {
    return _hash(&val, sizeof(val), old);
}
}  // namespace details

template <typename Result, typename Arg>
struct __hash_base {
    typedef Result result_type [[__deprecated__]];
    typedef Arg argument_type [[__deprecated__]];
};

template <typename T>
struct hash;

template <typename _Tp, typename = void>
struct __poison_hash {
    static constexpr bool __enable_hash_call = false;

   private:
    // Private rather than deleted to be non-trivially-copyable.
    __poison_hash(__poison_hash&&);
    ~__poison_hash();
};

template <typename _Tp>
struct __poison_hash<_Tp, void_t<decltype(hash<_Tp>()(declval<_Tp>()))>> {
    static constexpr bool __enable_hash_call = true;
};

// Helper struct for SFINAE-poisoning non-enum types.
template <typename _Tp, bool = is_enum<_Tp>::value>
struct __hash_enum {
   private:
    // Private rather than deleted to be non-trivially-copyable.
    __hash_enum(__hash_enum&&);
    ~__hash_enum();
};

template <typename _Tp>
struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp> {
    size_t operator()(_Tp __val) const noexcept {
        using __type = typename underlying_type<_Tp>::type;
        return hash<__type>{}(static_cast<__type>(__val));
    }
};

template <typename _Tp>
struct hash : __hash_enum<_Tp> {};

template <typename _Tp>
struct hash<_Tp*> : public __hash_base<size_t, _Tp*> {
    size_t operator()(_Tp* __p) const noexcept {
        return reinterpret_cast<size_t>(__p);
    }
};

#define _hashtable_define_trivial_hash(_Tp)              \
    template <>                                          \
    struct hash<_Tp> : public __hash_base<size_t, _Tp> { \
        size_t operator()(_Tp __val) const noexcept {    \
            return static_cast<size_t>(__val);           \
        }                                                \
    }

_hashtable_define_trivial_hash(bool);
_hashtable_define_trivial_hash(char);
_hashtable_define_trivial_hash(signed char);
_hashtable_define_trivial_hash(unsigned char);
_hashtable_define_trivial_hash(wchar_t);
_hashtable_define_trivial_hash(char8_t);
_hashtable_define_trivial_hash(char16_t);
_hashtable_define_trivial_hash(char32_t);
_hashtable_define_trivial_hash(short);
_hashtable_define_trivial_hash(int);
_hashtable_define_trivial_hash(long);
_hashtable_define_trivial_hash(long long);
_hashtable_define_trivial_hash(unsigned short);
_hashtable_define_trivial_hash(unsigned int);
_hashtable_define_trivial_hash(unsigned long);
_hashtable_define_trivial_hash(unsigned long long);
_hashtable_define_trivial_hash(__int128);
_hashtable_define_trivial_hash(unsigned __int128);

struct _Hash_impl {
    static size_t hash(const void* ptr, size_t clength,
                       size_t seed = static_cast<size_t>(0xc70f6907UL)) {
        return details::hash_bytes(ptr, clength, seed);
    }

    template <typename T>
    static size_t hash(const T& val) {
        return hash(&val, sizeof(val));
    }

    template <typename T>
    static size_t __hash_combine(const T& __val, size_t __hash) {
        return hash(&__val, sizeof(__val), __hash);
    }
};

template <>
struct hash<float> : public __hash_base<size_t, float> {
    size_t operator()(float __val) const noexcept {
        return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
    }
};

template <>
struct hash<double> : public __hash_base<size_t, double> {
    size_t operator()(double __val) const noexcept {
        // 0 and -0 both hash to zero.
        return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
    }
};

template <>
struct hash<long double> : public __hash_base<size_t, long double> {
    [[gnu::pure]] size_t operator()(long double __val) const noexcept;
};

template <>
struct hash<nullptr_t> : public __hash_base<size_t, nullptr_t> {
    size_t operator()(nullptr_t) const noexcept { return 0; }
};

template <typename _Hash>
struct __is_fast_hash : public std::true_type {};

template <>
struct __is_fast_hash<hash<long double>> : public std::false_type {};

template <typename func>
class function;

template <typename retval, typename... Args>
class function<retval(Args...)> {
   private:
    class callable {
       public:
        virtual ~callable() = default;
        virtual retval invoke(Args...) = 0;
    };

    template <typename func>
    class [[gnu::aligned(16)]] callableFunc : public callable {
       public:
        callableFunc(const func& t) : t_(t) {}

        ~callableFunc() override = default;

        retval invoke(Args... args) override { return t_(args...); }

       private:
        func t_;
    };

    callable* callable_;

   public:
    function(){};

    template <typename func>
    function(func t) : callable_(new callableFunc<func>(t)) {}

    ~function() { this->clear(); }

    void clear() {
        if (this->callable_ == nullptr)
            return;
        delete this->callable_;
    }

    template <typename func>
    function& operator=(func t) {
        if (this->callable_ != nullptr)
            delete this->callable_;
        this->callable_ = new callableFunc<func>(t);
        return *this;
    }

    retval operator()(Args... args) const {
        if (this->callable_ == nullptr)
            return retval();
        return this->callable_->invoke(args...);
    }

    bool operator==(bool set) { return (this->callable_ != nullptr) == set; }

    operator bool() { return this->callable_ != nullptr; }
};

template <typename Arg1, typename Arg2, typename Result>
struct binary_function {
    typedef Arg1 first_argument_type;
    typedef Arg2 second_argument_type;
    typedef Result result_type;
};

template <typename _Tp = void>
struct equal_to;

template <typename _Tp = void>
struct not_equal_to;

template <typename _Tp>
struct equal_to : public binary_function<_Tp, _Tp, bool> {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const {
        return __x == __y;
    }
};

template <typename _Tp>
struct not_equal_to : public binary_function<_Tp, _Tp, bool> {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const {
        return __x != __y;
    }
};
}  // namespace std