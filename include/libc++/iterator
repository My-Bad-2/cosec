#pragma once

#include <bits/iterator_base.h>
#include <bits/iterator_funcs.h>
#include <memory>
#include <type_traits>
#include <utility>

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std {
template <typename _Iterator>
class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
                      typename iterator_traits<_Iterator>::value_type,
                      typename iterator_traits<_Iterator>::difference_type,
                      typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference> {
    template <typename _Iter>
    friend class reverse_iterator;

   protected:
    _Iterator current;

    typedef iterator_traits<_Iterator> __traits_type;

   public:
    typedef _Iterator iterator_type;
    typedef typename __traits_type::pointer pointer;
    typedef typename __traits_type::difference_type difference_type;
    typedef typename __traits_type::reference reference;

    constexpr reverse_iterator() noexcept : current() {}

    explicit constexpr reverse_iterator(iterator_type __x) noexcept
        : current(__x) {}

    constexpr reverse_iterator(const reverse_iterator& __x) noexcept
        : current(__x.current) {}

    reverse_iterator& operator=(const reverse_iterator&) = default;

    template <typename _Iter>
    constexpr reverse_iterator(const reverse_iterator<_Iter>& __x) noexcept
        : current(__x.current) {}

    template <typename _Iter>

    constexpr reverse_iterator& operator=(
        const reverse_iterator<_Iter>& __x) noexcept {
        current = __x.current;
        return *this;
    }

    [[nodiscard]] constexpr iterator_type base() const noexcept {
        return current;
    }

    [[nodiscard]] constexpr reference operator*() const {
        _Iterator __tmp = current;
        return *--__tmp;
    }

    [[nodiscard]] constexpr pointer operator->() const
        requires is_pointer_v<_Iterator> ||
                 requires(const _Iterator __i) { __i.operator->(); }
    {
        _Iterator __tmp = current;
        --__tmp;
        return _S_to_pointer(__tmp);
    }

    constexpr reverse_iterator& operator++() {
        --current;
        return *this;
    }

    constexpr reverse_iterator operator++(int) {
        reverse_iterator __tmp = *this;
        --current;
        return __tmp;
    }

    constexpr reverse_iterator& operator--() {
        ++current;
        return *this;
    }

    constexpr reverse_iterator operator--(int) {
        reverse_iterator __tmp = *this;
        ++current;
        return __tmp;
    }

    [[nodiscard]] constexpr reverse_iterator operator+(
        difference_type __n) const {
        return reverse_iterator(current - __n);
    }

    constexpr reverse_iterator& operator+=(difference_type __n) {
        current -= __n;
        return *this;
    }

    [[nodiscard]] constexpr reverse_iterator operator-(
        difference_type __n) const {
        return reverse_iterator(current + __n);
    }

    constexpr reverse_iterator& operator-=(difference_type __n) {
        current += __n;
        return *this;
    }

    [[nodiscard]] constexpr reference operator[](difference_type __n) const {
        return *(*this + __n);
    }

   private:
    template <typename _Tp>
    static constexpr _Tp* _S_to_pointer(_Tp* __p) {
        return __p;
    }

    template <typename _Tp>
    static constexpr pointer _S_to_pointer(_Tp __t) {
        return __t.operator->();
    }
};

template <typename _Iterator>
[[nodiscard]] inline constexpr bool operator==(
    const reverse_iterator<_Iterator>& __x,
    const reverse_iterator<_Iterator>& __y) {
    return __x.base() == __y.base();
}

template <typename _Iterator>
[[nodiscard]] inline constexpr bool operator<(
    const reverse_iterator<_Iterator>& __x,
    const reverse_iterator<_Iterator>& __y) {
    return __y.base() < __x.base();
}

template <typename _Iterator>
[[nodiscard]] inline constexpr bool operator!=(
    const reverse_iterator<_Iterator>& __x,
    const reverse_iterator<_Iterator>& __y) {
    return !(__x == __y);
}

template <typename _Iterator>
[[nodiscard]] inline constexpr bool operator>(
    const reverse_iterator<_Iterator>& __x,
    const reverse_iterator<_Iterator>& __y) {
    return __y < __x;
}

template <typename _Iterator>
[[nodiscard]] inline constexpr bool operator<=(
    const reverse_iterator<_Iterator>& __x,
    const reverse_iterator<_Iterator>& __y) {
    return !(__y < __x);
}

template <typename _Iterator>
[[nodiscard]] inline constexpr bool operator>=(
    const reverse_iterator<_Iterator>& __x,
    const reverse_iterator<_Iterator>& __y) {
    return !(__x < __y);
}

template <typename _IteratorL, typename _IteratorR>
[[nodiscard]] inline constexpr bool operator==(
    const reverse_iterator<_IteratorL>& __x,
    const reverse_iterator<_IteratorR>& __y) {
    return __x.base() == __y.base();
}

template <typename _IteratorL, typename _IteratorR>
[[nodiscard]] inline constexpr bool operator<(
    const reverse_iterator<_IteratorL>& __x,
    const reverse_iterator<_IteratorR>& __y) {
    return __x.base() > __y.base();
}

template <typename _IteratorL, typename _IteratorR>
[[nodiscard]] inline constexpr bool operator!=(
    const reverse_iterator<_IteratorL>& __x,
    const reverse_iterator<_IteratorR>& __y) {
    return __x.base() != __y.base();
}

template <typename _IteratorL, typename _IteratorR>
[[nodiscard]] inline constexpr bool operator>(
    const reverse_iterator<_IteratorL>& __x,
    const reverse_iterator<_IteratorR>& __y) {
    return __x.base() < __y.base();
}

template <typename _IteratorL, typename _IteratorR>
inline constexpr bool operator<=(const reverse_iterator<_IteratorL>& __x,
                                 const reverse_iterator<_IteratorR>& __y) {
    return __x.base() >= __y.base();
}

template <typename _IteratorL, typename _IteratorR>
[[nodiscard]] inline constexpr bool operator>=(
    const reverse_iterator<_IteratorL>& __x,
    const reverse_iterator<_IteratorR>& __y) {
    return __x.base() <= __y.base();
}

template <typename _IteratorL, typename _IteratorR>
[[__nodiscard__]] inline constexpr auto operator-(
    const reverse_iterator<_IteratorL>& __x,
    const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base()) {
    return __y.base() - __x.base();
}

template <typename _Iterator>
[[nodiscard]] inline constexpr reverse_iterator<_Iterator> operator+(
    typename reverse_iterator<_Iterator>::difference_type __n,
    const reverse_iterator<_Iterator>& __x) {
    return reverse_iterator<_Iterator>(__x.base() - __n);
}

template <typename _Iterator>
inline constexpr reverse_iterator<_Iterator> __make_reverse_iterator(
    _Iterator __i) {
    return reverse_iterator<_Iterator>(__i);
}

template <typename _Iterator>
[[__nodiscard__]] inline constexpr reverse_iterator<_Iterator>
make_reverse_iterator(_Iterator __i) {
    return reverse_iterator<_Iterator>(__i);
}

template <typename _Iterator>
constexpr auto __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base()))) {
    return __make_reverse_iterator(__niter_base(__it.base()));
}

template <typename _Iterator>
constexpr auto __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base()))) {
    return __make_reverse_iterator(__miter_base(__it.base()));
}

template <typename _Container>
class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void> {
   protected:
    _Container* container;

   public:
    typedef _Container container_type;
    using difference_type = ptrdiff_t;

    explicit constexpr back_insert_iterator(_Container& __x)
        : container(std::addressof(__x)) {}

    constexpr back_insert_iterator& operator=(
        const typename _Container::value_type& __value) {
        container->push_back(__value);
        return *this;
    }

    constexpr back_insert_iterator& operator=(
        typename _Container::value_type&& __value) {
        container->push_back(std::move(__value));
        return *this;
    }

    [[nodiscard]] constexpr back_insert_iterator& operator*() { return *this; }

    constexpr back_insert_iterator& operator++() { return *this; }

    constexpr back_insert_iterator operator++(int) { return *this; }
};

template <typename _Container>
[[nodiscard]] constexpr inline back_insert_iterator<_Container> back_inserter(
    _Container& __x) {
    return back_insert_iterator<_Container>(__x);
}

template <typename _Container>
class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void> {
   protected:
    _Container* container;

   public:
    typedef _Container container_type;
    using difference_type = ptrdiff_t;

    explicit constexpr front_insert_iterator(_Container& __x)
        : container(std::addressof(__x)) {}

    constexpr front_insert_iterator& operator=(
        const typename _Container::value_type& __value) {
        container->push_front(__value);
        return *this;
    }

    constexpr front_insert_iterator& operator=(
        typename _Container::value_type&& __value) {
        container->push_front(std::move(__value));
        return *this;
    }

    [[nodiscard]] constexpr front_insert_iterator& operator*() { return *this; }

    constexpr front_insert_iterator& operator++() { return *this; }

    constexpr front_insert_iterator operator++(int) { return *this; }
};

template <typename _Container>
[[nodiscard]] constexpr inline front_insert_iterator<_Container> front_inserter(
    _Container& __x) {
    return front_insert_iterator<_Container>(__x);
}

template <typename _Container>
class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void> {
    typedef typename _Container::iterator _Iter;

   protected:
    _Container* container;
    _Iter iter;

   public:
    typedef _Container container_type;

    constexpr insert_iterator(_Container& __x, _Iter __i)
        : container(std::addressof(__x)), iter(__i) {}

    constexpr insert_iterator& operator=(
        const typename _Container::value_type& __value) {
        iter = container->insert(iter, __value);
        ++iter;
        return *this;
    }

    constexpr insert_iterator& operator=(
        typename _Container::value_type&& __value) {
        iter = container->insert(iter, std::move(__value));
        ++iter;
        return *this;
    }

    /// Simply returns *this.
    [[nodiscard]] constexpr insert_iterator& operator*() { return *this; }

    /// Simply returns *this.  (This %iterator does not @a move.)
    constexpr insert_iterator& operator++() { return *this; }

    /// Simply returns *this.  (This %iterator does not @a move.)
    constexpr insert_iterator& operator++(int) { return *this; }
};

template <typename _Container>
[[nodiscard]] inline insert_iterator<_Container> inserter(
    _Container& __x, typename _Container::iterator __i) {
    return insert_iterator<_Container>(__x, __i);
}
}  // namespace std

namespace __cxx {
template <typename _Iterator, typename _Container>
class __normal_iterator {
   protected:
    _Iterator _M_current;

    typedef std::iterator_traits<_Iterator> __traits_type;

    template <typename _Iter>
    using __convertible_from =
        std::enable_if_t<std::is_convertible<_Iter, _Iterator>::value>;

   public:
    typedef _Iterator iterator_type;
    typedef typename __traits_type::iterator_category iterator_category;
    typedef typename __traits_type::value_type value_type;
    typedef typename __traits_type::difference_type difference_type;
    typedef typename __traits_type::reference reference;
    typedef typename __traits_type::pointer pointer;

    constexpr __normal_iterator() noexcept : _M_current(_Iterator()) {}

    explicit constexpr __normal_iterator(const _Iterator& __i) noexcept
        : _M_current(__i) {}

    template <typename _Iter, typename = __convertible_from<_Iter>>
    constexpr __normal_iterator(
        const __normal_iterator<_Iter, _Container>& __i) noexcept
        : _M_current(__i.base()) {}

    constexpr reference operator*() const noexcept { return *_M_current; }

    constexpr pointer operator->() const noexcept { return _M_current; }

    constexpr __normal_iterator& operator++() noexcept {
        ++_M_current;
        return *this;
    }

    constexpr __normal_iterator operator++(int) noexcept {
        return __normal_iterator(_M_current++);
    }

    constexpr __normal_iterator& operator--() noexcept {
        --_M_current;
        return *this;
    }

    constexpr __normal_iterator operator--(int) noexcept {
        return __normal_iterator(_M_current--);
    }

    constexpr reference operator[](difference_type __n) const noexcept {
        return _M_current[__n];
    }

    constexpr __normal_iterator& operator+=(difference_type __n) noexcept {
        _M_current += __n;
        return *this;
    }

    constexpr __normal_iterator operator+(difference_type __n) const noexcept {
        return __normal_iterator(_M_current + __n);
    }

    constexpr __normal_iterator& operator-=(difference_type __n) noexcept {
        _M_current -= __n;
        return *this;
    }

    constexpr __normal_iterator operator-(difference_type __n) const noexcept {
        return __normal_iterator(_M_current - __n);
    }

    constexpr const _Iterator& base() const noexcept { return _M_current; }
};

template <typename _IteratorL, typename _IteratorR, typename _Container>
[[nodiscard]] constexpr inline bool operator==(
    const __normal_iterator<_IteratorL, _Container>& __lhs,
    const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept {
    return __lhs.base() == __rhs.base();
}

template <typename _Iterator, typename _Container>
[[nodiscard]] constexpr inline bool operator==(
    const __normal_iterator<_Iterator, _Container>& __lhs,
    const __normal_iterator<_Iterator, _Container>& __rhs) noexcept {
    return __lhs.base() == __rhs.base();
}

template <typename _IteratorL, typename _IteratorR, typename _Container>
[[nodiscard]] constexpr inline bool operator!=(
    const __normal_iterator<_IteratorL, _Container>& __lhs,
    const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept {
    return __lhs.base() != __rhs.base();
}

template <typename _Iterator, typename _Container>
[[nodiscard]] constexpr inline bool operator!=(
    const __normal_iterator<_Iterator, _Container>& __lhs,
    const __normal_iterator<_Iterator, _Container>& __rhs) noexcept {
    return __lhs.base() != __rhs.base();
}

template <typename _IteratorL, typename _IteratorR, typename _Container>
[[nodiscard]] inline bool operator<(
    const __normal_iterator<_IteratorL, _Container>& __lhs,
    const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept {
    return __lhs.base() < __rhs.base();
}

template <typename _Iterator, typename _Container>
[[nodiscard]] constexpr inline bool operator<(
    const __normal_iterator<_Iterator, _Container>& __lhs,
    const __normal_iterator<_Iterator, _Container>& __rhs) noexcept {
    return __lhs.base() < __rhs.base();
}

template <typename _IteratorL, typename _IteratorR, typename _Container>
[[nodiscard]] inline bool operator>(
    const __normal_iterator<_IteratorL, _Container>& __lhs,
    const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept {
    return __lhs.base() > __rhs.base();
}

template <typename _Iterator, typename _Container>
[[nodiscard]] constexpr inline bool operator>(
    const __normal_iterator<_Iterator, _Container>& __lhs,
    const __normal_iterator<_Iterator, _Container>& __rhs) noexcept {
    return __lhs.base() > __rhs.base();
}

template <typename _IteratorL, typename _IteratorR, typename _Container>
[[nodiscard]] inline bool operator<=(
    const __normal_iterator<_IteratorL, _Container>& __lhs,
    const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept {
    return __lhs.base() <= __rhs.base();
}

template <typename _Iterator, typename _Container>
[[nodiscard]] constexpr inline bool operator<=(
    const __normal_iterator<_Iterator, _Container>& __lhs,
    const __normal_iterator<_Iterator, _Container>& __rhs) noexcept {
    return __lhs.base() <= __rhs.base();
}

template <typename _IteratorL, typename _IteratorR, typename _Container>
[[nodiscard]] inline bool operator>=(
    const __normal_iterator<_IteratorL, _Container>& __lhs,
    const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept {
    return __lhs.base() >= __rhs.base();
}

template <typename _Iterator, typename _Container>
[[nodiscard]] constexpr inline bool operator>=(
    const __normal_iterator<_Iterator, _Container>& __lhs,
    const __normal_iterator<_Iterator, _Container>& __rhs) noexcept {
    return __lhs.base() >= __rhs.base();
}

template <typename _IteratorL, typename _IteratorR, typename _Container>
[[__nodiscard__]] constexpr inline auto operator-(
    const __normal_iterator<_IteratorL, _Container>& __lhs,
    const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base()) {
    return __lhs.base() - __rhs.base();
}

template <typename _Iterator, typename _Container>
[[nodiscard]] constexpr inline
    typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
              const __normal_iterator<_Iterator, _Container>& __rhs) noexcept {
    return __lhs.base() - __rhs.base();
}

template <typename _Iterator, typename _Container>
[[nodiscard]] constexpr inline __normal_iterator<_Iterator, _Container>
operator+(
    typename __normal_iterator<_Iterator, _Container>::difference_type __n,
    const __normal_iterator<_Iterator, _Container>& __i) noexcept {
    return __normal_iterator<_Iterator, _Container>(__i.base() + __n);
}
}  // namespace __cxx

namespace std {
template <typename _Iterator, typename _Container>
constexpr _Iterator __niter_base(
    __cxx::__normal_iterator<_Iterator, _Container> __it) {
    return __it.base();
}

template <typename _Iterator>
class move_iterator {
    _Iterator _M_current;

    using __traits_type = iterator_traits<_Iterator>;
    using __base_ref = typename __traits_type::reference;

    template <typename _Iter2>
    friend class move_iterator;

   public:
    using iterator_type = _Iterator;

    typedef typename __traits_type::iterator_category iterator_category;
    typedef typename __traits_type::value_type value_type;
    typedef typename __traits_type::difference_type difference_type;
    typedef _Iterator pointer;
    using reference =
        conditional_t<is_reference<__base_ref>::value,
                      typename remove_reference<__base_ref>::type&&,
                      __base_ref>;

    constexpr move_iterator() : _M_current() {}

    explicit constexpr move_iterator(iterator_type __i)
        : _M_current(std::move(__i)) {}

    template <typename _Iter>
    constexpr move_iterator(const move_iterator<_Iter>& __i)
        : _M_current(__i._M_current) {}

    template <typename _Iter>
    constexpr move_iterator& operator=(const move_iterator<_Iter>& __i) {
        _M_current = __i._M_current;
        return *this;
    }

    [[__nodiscard__]] constexpr iterator_type base() const {
        return _M_current;
    }

    // [[nodiscard]] constexpr const iterator_type& base() const& noexcept {
    //     return _M_current;
    // }

    [[nodiscard]] constexpr iterator_type&& base() {
        return std::move(_M_current);
    }

    [[__nodiscard__]] constexpr reference operator*() const {
        return static_cast<reference>(*_M_current);
    }

    [[__nodiscard__]] constexpr pointer operator->() const {
        return _M_current;
    }

    constexpr move_iterator& operator++() {
        ++_M_current;
        return *this;
    }

    constexpr move_iterator operator++(int) {
        move_iterator __tmp = *this;
        ++_M_current;
        return __tmp;
    }

    constexpr move_iterator& operator--() {
        --_M_current;
        return *this;
    }

    constexpr move_iterator operator--(int) {
        move_iterator __tmp = *this;
        --_M_current;
        return __tmp;
    }

    [[__nodiscard__]] constexpr move_iterator operator+(
        difference_type __n) const {
        return move_iterator(_M_current + __n);
    }

    constexpr move_iterator& operator+=(difference_type __n) {
        _M_current += __n;
        return *this;
    }

    [[__nodiscard__]] constexpr move_iterator operator-(
        difference_type __n) const {
        return move_iterator(_M_current - __n);
    }

    constexpr move_iterator& operator-=(difference_type __n) {
        _M_current -= __n;
        return *this;
    }

    [[__nodiscard__]] constexpr reference operator[](
        difference_type __n) const {
        return std::move(_M_current[__n]);
    }
};

template <typename _IteratorL, typename _IteratorR>
[[__nodiscard__]] inline constexpr bool operator==(
    const move_iterator<_IteratorL>& __x,
    const move_iterator<_IteratorR>& __y) {
    return __x.base() == __y.base();
}

template <typename _IteratorL, typename _IteratorR>
[[__nodiscard__]] inline constexpr bool operator!=(
    const move_iterator<_IteratorL>& __x,
    const move_iterator<_IteratorR>& __y) {
    return !(__x == __y);
}

template <typename _IteratorL, typename _IteratorR>
[[__nodiscard__]] inline constexpr bool operator<(
    const move_iterator<_IteratorL>& __x,
    const move_iterator<_IteratorR>& __y) {
    return __x.base() < __y.base();
}

template <typename _IteratorL, typename _IteratorR>
[[__nodiscard__]] inline constexpr bool operator<=(
    const move_iterator<_IteratorL>& __x,
    const move_iterator<_IteratorR>& __y) {
    return !(__y < __x);
}

template <typename _IteratorL, typename _IteratorR>
[[__nodiscard__]] inline constexpr bool operator>(
    const move_iterator<_IteratorL>& __x,
    const move_iterator<_IteratorR>& __y) {
    return __y < __x;
}

template <typename _IteratorL, typename _IteratorR>
[[__nodiscard__]] inline constexpr bool operator>=(
    const move_iterator<_IteratorL>& __x,
    const move_iterator<_IteratorR>& __y) {
    return !(__x < __y);
}

template <typename _Iterator>
[[__nodiscard__]] inline constexpr bool operator==(
    const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y) {
    return __x.base() == __y.base();
}

template <typename _Iterator>
[[__nodiscard__]] inline constexpr bool operator!=(
    const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y) {
    return !(__x == __y);
}

template <typename _Iterator>
[[__nodiscard__]] inline constexpr bool operator<(
    const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y) {
    return __x.base() < __y.base();
}

template <typename _Iterator>
[[__nodiscard__]] inline constexpr bool operator<=(
    const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y) {
    return !(__y < __x);
}

template <typename _Iterator>
[[__nodiscard__]] inline constexpr bool operator>(
    const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y) {
    return __y < __x;
}

template <typename _Iterator>
[[__nodiscard__]] inline constexpr bool operator>=(
    const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y) {
    return !(__x < __y);
}

template <typename _IteratorL, typename _IteratorR>
[[__nodiscard__]] inline constexpr auto operator-(
    const move_iterator<_IteratorL>& __x, const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base()) {
    return __x.base() - __y.base();
}

template <typename _Iterator>
[[__nodiscard__]] inline constexpr move_iterator<_Iterator> operator+(
    typename move_iterator<_Iterator>::difference_type __n,
    const move_iterator<_Iterator>& __x) {
    return __x + __n;
}

template <typename _Iterator>
[[__nodiscard__]] inline constexpr move_iterator<_Iterator> make_move_iterator(
    _Iterator __i) {
    return move_iterator<_Iterator>(std::move(__i));
}

template <typename _Iterator>
constexpr auto __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base()))) {
    return make_move_iterator(__niter_base(__it.base()));
}

// template <typename _Iterator>
// struct __is_move_iterator<move_iterator<_Iterator>> {
//     enum { __value = 1 };
//     typedef true_type __type;
// };

template <typename _Iterator>
constexpr auto __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base())) {
    return __miter_base(__it.base());
}

#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)
#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) \
    std::__make_move_if_noexcept_iterator(_Iter)

template <typename _InputIterator>
using __iter_key_t = remove_const<
    typename iterator_traits<_InputIterator>::value_type::first_type>;

template <typename _InputIterator>
using __iter_val_t =
    typename iterator_traits<_InputIterator>::value_type::second_type;

template <typename _T1, typename _T2>
struct pair;

template <typename _InputIterator>
using __iter_to_alloc_t =
    pair<add_const<__iter_key_t<_InputIterator>>, __iter_val_t<_InputIterator>>;
}  // namespace std