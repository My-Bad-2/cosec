#pragma once

#include <algorithm>
#include <cstddef>
#include <cstring>
#include <initializer_list>
#include <iterator>
// #include <utility>

namespace std {
template <typename T>
class vector {
   public:
    using iterator = T*;
    using const_iterator = const T*;
    using reverse_iterator = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

   public:
    constexpr vector() : m_values(nullptr), m_size(0), m_capacity(0) {}

    constexpr vector(size_t n)
        : m_size(n), m_capacity(n), ctor_initialized(true) {
        m_values = new T[m_capacity];

        for (size_t i = 0; i < n; ++i) {
            m_values[i] = T();
        }
    }

    constexpr vector(size_t n, const T& value)
        : m_size(n), m_capacity(n), ctor_initialized(true) {
        m_values = new T[m_capacity];

        for (size_t i = 0; i < n; ++i) {
            m_values = value;
        }
    }

    constexpr vector(const std::initializer_list<T>& i_list)
        : m_size(i_list.size()), m_capacity(i_list.size()) {
        m_values = new T[m_capacity];

        for (auto iter = i_list.begin(), i = 0; iter != i_list.end();
             ++i, ++iter) {
            m_values[i] = *iter;
        }
    }

    constexpr vector(const vector& other)
        : m_size(other.m_size),
          m_capacity(other.m_capacity),
          m_values(new T[m_capacity]) {
        for (int i = 0; i < m_size; ++i) {
            m_values[i] = other.m_values[i];
        }
    }

    constexpr friend void swap(vector& first, vector& second) {
        using std::swap;

        swap(first.m_size, second.m_size);
        swap(first.m_capacity, second.m_capacity);
        swap(first.m_values, second.m_values);
    }

    constexpr vector(const vector&& other) { swap(*this, other); }

    constexpr ~vector() { delete[] m_values; }

    constexpr vector<T>& operator=(vector<T> other) {
        swap(*this, other);

        return *this;
    }

    constexpr vector<T>& operator=(vector<T>&& other) noexcept {
        swap(*this, other);

        return *this;
    }

    constexpr const T& front() const { return m_values[0]; }

    constexpr T& front() { return m_values[0]; }

    constexpr const T& back() const { return m_values[m_size - 1]; }

    constexpr T& back() { return m_values[m_size - 1]; }

    constexpr T& at(size_t index) {
        if (index >= m_size) {
            return;
        }

        return m_values[index];
    }

    constexpr T& operator[](size_t index) { return m_values[index]; }

    constexpr const T& at(size_t index) const {
        if (index >= m_size) {
            return;
        }

        return m_values[index];
    }

    const T& operator[](size_t index) const { return m_values[index]; }

    constexpr T* data() noexcept { return m_values; }

    constexpr const T* data() const noexcept { return m_values; }

    constexpr iterator begin() noexcept { return m_values; }

    constexpr const_iterator begin() const noexcept { return m_values; }

    constexpr iterator end() noexcept { return m_values + m_size; }

    constexpr const_iterator end() const noexcept { return m_values + m_size; }

    constexpr const_iterator cbegin() const noexcept { return m_values; }

    constexpr const_iterator cend() const { return m_values + m_size; }

    constexpr reverse_iterator rbegin() noexcept {
        return reverse_iterator(end());
    }

    constexpr reverse_iterator rend() noexcept {
        return reverse_iterator(begin());
    }

    constexpr const_reverse_iterator crbegin() const noexcept {
        return rbegin();
    }

    constexpr const_reverse_iterator crend() const noexcept { return rend(); }

    template <typename... Args>
    constexpr void emplace_back(Args&&... args) {
        if (m_size == m_capacity) {
            if (ctor_initialized) {
                m_capacity *= 2;
            } else {
                if (m_capacity == 0) {
                    m_capacity = 1;
                } else if (m_size < 8) {
                    m_capacity++;
                } else if (m_size >= 8) {
                    m_capacity *= 2;
                }
            }

            reallocate();
        }

        m_values[m_size++] = T(std::forward<Args>(args)...);
    }

    template <typename... Args>
    constexpr iterator emplace(const_iterator pos, Args&&... args) {
        const size_t dist = pos - begin();

        if (dist == m_capacity) {
            emplace_back(T(std::forward<T>(args)...));
        } else {
            if (m_size == m_capacity) {
                m_capacity *= 2;

                reallocate();
            }

            std::move_backward(begin() + dist, end(), end() + 1);

            iterator iter = &m_values[dist];
            *iter = std::move(T(std::forward<Args>(args)...));

            ++m_size;

            return iter;
        }
    }

    constexpr iterator insert(iterator pos, const T& value) {
        emplace(pos, value);
    }

    constexpr iterator insert(const_iterator pos, const T& value) {
        emplace(pos, value);
    }

    constexpr iterator insert(const_iterator pos, T&& value) {
        emplace(pos, std::forward<T>(value));
    }

    constexpr void insert(iterator pos, size_t n, const T& value) {
        const size_t dist = pos - begin();

        if (m_size + n > m_capacity) {
            m_capacity *= 2;

            reallocate();
        }

        std::move_backward(begin() + dist, end(), end() + n);

        for (int i = dist; i < dist + n; ++i) {
            m_values[i] = value;
        }

        m_size += n;
    }

    constexpr iterator insert(const_iterator pos, size_t n, const T& value) {
        const size_t dist = pos - begin();

        if (m_size + n > m_capacity) {
            m_capacity *= 2;

            reallocate();
        }

        iterator iter = &m_values[dist];

        std::move_backward(begin() + dist, end(), end() + n);

        for (int i = dist; i < dist + n; ++i) {
            *iter++ = value;
        }

        m_size += n;

        return &m_values[dist];
    }

    constexpr void push_back(const T& value) { emplace_back(value); }

    constexpr void push_back(T&& value) {
        emplace_back(std::forward<T>(value));
    }

    constexpr void pop_back() {
        --m_size;

        delete m_values[end()];
    }

    constexpr iterator erase(const_iterator pos) {
        const size_t dist = pos - begin();

        if (m_size != 0) {
            --m_size;
        }

        int inc;

        for (inc = 2; m_size > (1 << inc); ++inc) {
            ;
        }

        if (m_size == 0) {
            m_capacity = 0;
        } else {
            m_capacity = 1 << inc;
        }

        if (m_capacity != 0) {
            iterator temp = new T[m_capacity];

            for (int i = 0, j = 0; j <= m_size; ++j) {
                if (j != dist) {
                    temp[i++] = m_values[j];
                }
            }

            delete[] m_values;
            m_values = temp;
        }

        return &m_values[dist];
    }

    constexpr iterator erase(iterator first, iterator last) {
        const size_t n = last - first;

        std::move(last, end(), first);

        m_size -= n;

        return &m_values[n];
    }

    constexpr void clear() noexcept { m_size = 0; }

    constexpr void shrink_to_fit() {
        m_capacity = m_size;

        reallocate();
    }

    constexpr void reserve(size_t n) {
        if (n > m_capacity) {
            m_capacity = n;
            reallocate();
        }
    }

    constexpr void resize(size_t n) {
        if (n > m_capacity) {
            ctor_initialized = true;

            m_capacity = n;
            reallocate();
        }

        m_size = n;
    }

    constexpr void resize(size_t n, const T& value) {
        if (n > m_capacity) {
            ctor_initialized = true;

            m_capacity = n;
            reallocate();
        }

        if (n > m_size) {
            for (size_t i = m_size; i < n; ++i) {
                m_values[i] = value;
            }
        }

        m_size = n;
    }

    constexpr size_t size() const noexcept { return m_size; }

    constexpr size_t capacity() const noexcept { return m_capacity; }

    constexpr bool empty() const noexcept { return begin() == end(); }

    template <typename U>
    friend bool operator==(const vector<U>& lhs, const vector<U>& rhs);

   private:
    constexpr void reallocate() {
        T* temp = new T[m_capacity];

        for (size_t i = 0; i < m_size; ++i) {
            temp[i] = m_values[i];
        }

        delete[] m_values;

        m_values = temp;
    }

   private:
    T* m_values;
    size_t m_size;
    size_t m_capacity;

    bool ctor_initialized = false;
};

template <typename U>
inline bool operator==(const vector<U>& lhs, const vector<U>& rhs) {
    if (lhs.m_size != rhs.m_size) {
        return false;
    }

    for (size_t i = 0; i < lhs.m_size; ++i) {
        if (lhs.m_values[i] != rhs.m_values[i]) {
            return false;
        }
    }

    return true;
}
}  // namespace std